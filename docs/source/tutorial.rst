Tutorial
========

At the root of the MARVELsim repository two scripts called ``simulator-marvel.py`` and ``rv-generator.py``. The former is the main script we will use to simulate the MARVEL spectra and we will in the following distinguish between the usage of a **science mode** and **calibration mode** of this software. Intuitively the science mode is for when we want to simulate a Radial Velocity (RV) time series by a RV cross-dispersion displacement in our simulated spectra due to the presence of a planet around the stellar host. We will ellaborate on how to perform such simulations in the following, but notice ``rv-generator.py`` is a small generic script to generate the RV time series as input for ``simulator-marvel.py``. The calibration mode of ``simulator-marvel.py`` is what also is referred to the *afternoon calibrations* as these calibrated spectral images are usuaally conducted during the afternoon prior to the nighlt observations. We start explaining the generation of calibration spectra, then object spectra, and how to use PyEchelle and Pyxel independently.

.. image:: marvel_spectrum.png
   :align: center
   :width: 700

MARVELsim afternoon calibration
-------------------------------

The script ``simulator-marvel.py`` makes it very easy to produce a batch of calibration data similar to what in the future will be produced in afternoon, so-called afternoon calibration data. A batch of calibrated data consist of

  - 10 bias images
  - 5 spectral flats
  - 5 ThAr arc spectra

To acquire an overview of the module simply use:

.. code-block:: shell

   python simulator.py -h

The calibrated data are simply generated by adding the calibration flag and parsing the ourput directory to the simulator as follows: 

.. code-block:: shell

   python simulator-marvel.py --calibs -o </path/to/output/>


MARVELsim RV simulation
-----------------------
   
Text..

PyEchelle examples
------------------

The commands shown below are supposed to be executed in the root directory of pyechelle.

**Bias images:** The bias level and std read noise value is measured from HERMES data. The values are bias = 2170 ADU and read-noise-std = 5.5 ADU, respectively. Since we need the count in electrons we multiply with the gain of 9.4 e/ADU which gives 20398 e and 52 e. 

.. code-block:: shell

   pyechelle --fiber 1-5 -s MARVEL_2021_11_22 --sources Constant -t 0.0 --bias 20398 --read_noise 52 -o marvel_bias.fits


**Spectral flats:**

.. code-block:: shell
		
   pyechelle --fiber 1-5 -s MARVEL_2021_11_22 --sources Constant Constant Constant Constant -t 10 --bias 20398 --read_noise 52 -o marvel_flat.fits

**Etalon spectra:**

.. code-block:: shell

   pyechelle --fiber 1-5 -s MARVEL_2021_11_22 --sources Etalon --etalon_d=6 -t 10 --bias 20398 --read_noise 52 -o marvel_flat.fits

**Stellar spectra:**

.. code-block:: shell

   pyechelle --fiber 1-5 -s MARVEL_2021_11_22 --sources Phoenix Phoenix Phoenix Phoenix Etalon --etalon_d=6 --d_primary 0.8 --d_secondary 0.1 --phoenix_t_eff 5800 --phoenix_log_g 4.5 --phoenix_z 0.0 --phoenix_alpha 0.0 --phoenix_magnitude 10.0 -t 1200 -o output/marvel_science_G2V_10mag_1200s.fits


Pyxel examples
--------------



